import React, { useState, useEffect } from 'react';
import { StudyFile } from '../../types/session';
import ViewContainer from '../ui/ViewContainer';
import MarkdownRenderer from '../ui/MarkdownRenderer';

interface SummaryViewProps {
  files: StudyFile[];
}

const SummaryView: React.FC<SummaryViewProps> = ({ files }) => {
  const [summary, setSummary] = useState<string>('');
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const generateSummary = async () => {
      if (files.length === 0) return;

      setIsLoading(true);
      setError(null);

      try {
        // For now, create a simple summary from the content
        const allContent = files.map(file => file.content).join('\n\n');
        const words = allContent.split(' ').slice(0, 200); // First 200 words
        const simpleSummary = `# Summary\n\nThis is a summary of the uploaded documents.\n\n**Content Preview:**\n\n${words.join(' ')}...\n\n*This is a placeholder summary. In a full implementation, this would be generated by AI analysis of the document content.*`;
        setSummary(simpleSummary);
      } catch (err) {
        setError(err instanceof Error ? err.message : 'Failed to generate summary');
      } finally {
        setIsLoading(false);
      }
    };

    generateSummary();
  }, [files]);

  return (
    <ViewContainer title="Summary" isLoading={isLoading} error={error}>
      <MarkdownRenderer content={summary} />
    </ViewContainer>
  );
};

export default SummaryView; 