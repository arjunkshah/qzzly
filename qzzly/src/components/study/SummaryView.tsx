import React, { useEffect } from 'react';
import { StudyFile } from '../../types/session';
import ViewContainer from '../ui/ViewContainer';
import MarkdownRenderer from '../ui/MarkdownRenderer';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { fetchStudyMaterials, createStudyMaterial } from '../../services/supabaseStudyContent';
import { useAuth } from '../../contexts/AuthContext';

interface SummaryViewProps {
  files: StudyFile[];
  sessionId: string;
}

const SummaryView: React.FC<SummaryViewProps> = ({ files, sessionId }) => {
  const { user } = useAuth();
  const queryClient = useQueryClient();

  // Fetch summary from Supabase
  const { data: summaries = [], isLoading, error } = useQuery({
    queryKey: ['summary', sessionId],
    queryFn: () => fetchStudyMaterials(sessionId),
    enabled: !!sessionId,
  });

  // Find summary material
  const summary = summaries.find((m) => m.format === 'summary');

  // Create summary mutation
  const createSummaryMutation = useMutation({
    mutationFn: async () => {
      if (!user) throw new Error('Not authenticated');
      // For now, create a simple summary from the content
      const allContent = files.map(file => file.content).join('\n\n');
      const words = allContent.split(' ').slice(0, 200); // First 200 words
      const simpleSummary = `# Summary\n\nThis is a summary of the uploaded documents.\n\n**Content Preview:**\n\n${words.join(' ')}...\n\n*This is a placeholder summary. In a full implementation, this would be generated by AI analysis of the document content.*`;
      return await createStudyMaterial(sessionId, user.id, 'Summary', simpleSummary, 'summary', 'medium');
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['summary', sessionId] });
    },
  });

  useEffect(() => {
    if (!isLoading && !summary && files.length > 0) {
      createSummaryMutation.mutate();
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [isLoading, summary, files]);

  return (
    <ViewContainer title="Summary" isLoading={isLoading || createSummaryMutation.isLoading} error={error instanceof Error ? error.message : undefined}>
      <MarkdownRenderer content={summary?.content || ''} />
    </ViewContainer>
  );
};

export default SummaryView; 