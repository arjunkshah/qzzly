import React, { useState, useEffect } from 'react';
import { StudyFile } from '../../types/session';
import ViewContainer from '../ui/ViewContainer';
import MarkdownRenderer from '../ui/MarkdownRenderer';

interface OutlineViewProps {
  files: StudyFile[];
}

const OutlineView: React.FC<OutlineViewProps> = ({ files }) => {
  const [outline, setOutline] = useState<string>('');
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const generateOutline = async () => {
      if (files.length === 0) return;

      setIsLoading(true);
      setError(null);

      try {
        // For now, create a simple outline structure
        const simpleOutline = `# Document Outline\n\n## File Structure\n\n${files.map((file, index) => `### ${index + 1}. ${file.name}\n- Type: ${file.type}\n- Content length: ${file.content.length} characters\n`).join('\n')}\n\n## Content Overview\n\n*This is a placeholder outline. In a full implementation, this would be generated by AI analysis of the document structure and content.*`;
        setOutline(simpleOutline);
      } catch (err) {
        setError(err instanceof Error ? err.message : 'Failed to generate outline');
      } finally {
        setIsLoading(false);
      }
    };

    generateOutline();
  }, [files]);

  return (
    <ViewContainer title="Outline" isLoading={isLoading} error={error}>
      <MarkdownRenderer content={outline} />
    </ViewContainer>
  );
};

export default OutlineView; 