import React, { useEffect } from 'react';
import { StudyFile } from '../../types/session';
import ViewContainer from '../ui/ViewContainer';
import MarkdownRenderer from '../ui/MarkdownRenderer';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { fetchStudyMaterials, createStudyMaterial } from '../../services/supabaseStudyContent';
import { useAuth } from '../../contexts/AuthContext';

interface OutlineViewProps {
  files: StudyFile[];
  sessionId: string;
}

const OutlineView: React.FC<OutlineViewProps> = ({ files, sessionId }) => {
  const { user } = useAuth();
  const queryClient = useQueryClient();

  // Fetch outline from Supabase
  const { data: materials = [], isLoading, error } = useQuery({
    queryKey: ['outline', sessionId],
    queryFn: () => fetchStudyMaterials(sessionId),
    enabled: !!sessionId,
  });

  // Find outline material
  const outline = materials.find((m) => m.format === 'outline');

  // Create outline mutation
  const createOutlineMutation = useMutation({
    mutationFn: async () => {
      if (!user) throw new Error('Not authenticated');
      // For now, create a simple outline structure
      const simpleOutline = `# Document Outline\n\n## File Structure\n\n${files.map((file, index) => `### ${index + 1}. ${file.name}\n- Type: ${file.type}\n- Content length: ${file.content.length} characters\n`).join('\n')}\n\n## Content Overview\n\n*This is a placeholder outline. In a full implementation, this would be generated by AI analysis of the document structure and content.*`;
      return await createStudyMaterial(sessionId, user.id, 'Outline', simpleOutline, 'outline', 'medium');
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['outline', sessionId] });
    },
  });

  useEffect(() => {
    if (!isLoading && !outline && files.length > 0) {
      createOutlineMutation.mutate();
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [isLoading, outline, files]);

  return (
    <ViewContainer title="Outline" isLoading={isLoading || createOutlineMutation.isLoading} error={error instanceof Error ? error.message : undefined}>
      <MarkdownRenderer content={outline?.content || ''} />
    </ViewContainer>
  );
};

export default OutlineView; 