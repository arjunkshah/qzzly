import React, { useState, useEffect } from 'react';
import { StudyFile } from '../../types/session';
import ViewContainer from '../ui/ViewContainer';
import MarkdownRenderer from '../ui/MarkdownRenderer';

interface NotesViewProps {
  files: StudyFile[];
}

const NotesView: React.FC<NotesViewProps> = ({ files }) => {
  const [notes, setNotes] = useState<string>('');
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const generateNotes = async () => {
      if (files.length === 0) return;

      setIsLoading(true);
      setError(null);

      try {
        // For now, create simple notes from the content
        const allContent = files.map(file => file.content).join('\n\n');
        const words = allContent.split(' ').slice(0, 300); // First 300 words
        const simpleNotes = `# Study Notes\n\n## Key Points\n\n- Document contains ${files.length} file(s)\n- Total content length: ${allContent.length} characters\n- Main topics extracted from content\n\n## Content Overview\n\n${words.join(' ')}...\n\n## Notes\n\n*This is a placeholder for study notes. In a full implementation, this would be generated by AI analysis of the document content.*`;
        setNotes(simpleNotes);
      } catch (err) {
        setError(err instanceof Error ? err.message : 'Failed to generate notes');
      } finally {
        setIsLoading(false);
      }
    };

    generateNotes();
  }, [files]);

  return (
    <ViewContainer title="Study Notes" isLoading={isLoading} error={error}>
      <MarkdownRenderer content={notes} />
    </ViewContainer>
  );
};

export default NotesView; 