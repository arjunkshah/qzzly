import React, { useEffect } from 'react';
import { StudyFile } from '../../types/session';
import ViewContainer from '../ui/ViewContainer';
import MarkdownRenderer from '../ui/MarkdownRenderer';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { fetchStudyMaterials, createStudyMaterial } from '../../services/supabaseStudyContent';
import { useAuth } from '../../contexts/AuthContext';

interface NotesViewProps {
  files: StudyFile[];
  sessionId: string;
}

const NotesView: React.FC<NotesViewProps> = ({ files, sessionId }) => {
  const { user } = useAuth();
  const queryClient = useQueryClient();

  // Fetch notes from Supabase
  const { data: materials = [], isLoading, error } = useQuery({
    queryKey: ['notes', sessionId],
    queryFn: () => fetchStudyMaterials(sessionId),
    enabled: !!sessionId,
  });

  // Find notes material
  const notes = materials.find((m) => m.format === 'notes');

  // Create notes mutation
  const createNotesMutation = useMutation({
    mutationFn: async () => {
      if (!user) throw new Error('Not authenticated');
      // For now, create simple notes from the content
      const allContent = files.map(file => file.content).join('\n\n');
      const words = allContent.split(' ').slice(0, 300); // First 300 words
      const simpleNotes = `# Study Notes\n\n## Key Points\n\n- Document contains ${files.length} file(s)\n- Total content length: ${allContent.length} characters\n- Main topics extracted from content\n\n## Content Overview\n\n${words.join(' ')}...\n\n## Notes\n\n*This is a placeholder for study notes. In a full implementation, this would be generated by AI analysis of the document content.*`;
      return await createStudyMaterial(sessionId, user.id, 'Notes', simpleNotes, 'notes', 'medium');
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['notes', sessionId] });
    },
  });

  useEffect(() => {
    if (!isLoading && !notes && files.length > 0) {
      createNotesMutation.mutate();
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [isLoading, notes, files]);

  return (
    <ViewContainer title="Study Notes" isLoading={isLoading || createNotesMutation.isLoading} error={error instanceof Error ? error.message : undefined}>
      <MarkdownRenderer content={notes?.content || ''} />
    </ViewContainer>
  );
};

export default NotesView; 